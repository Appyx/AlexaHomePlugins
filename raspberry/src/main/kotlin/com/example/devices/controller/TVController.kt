package com.example.devices.controller

import at.rgstoettner.alexahome.plugin.v2.OnOff
import at.rgstoettner.alexahome.plugin.v2.Percentage
import at.rgstoettner.alexahome.plugin.v2.V2Device
import at.rgstoettner.alexahome.plugin.v2.V2DeviceProvider
import com.example.devices.BasicIRDevice
import com.example.devices.DeviceAdapter
import com.example.devices.log
import com.example.devices.sendIR

/**
 * These signals are recorded with the kernel module gpio-reflect: https://github.com/Appyx/gpio-reflect
 */
class TVController : V2DeviceProvider {

    companion object {

        private val pause = "|1000.0|"
        private val input = "9.62|4.452|0.588|0.531|0.579|0.540|0.580|1.658|0.576|0.543|0.583|0.536|0.578|0.540|0.578|0.541|0.582|0.537|0.578|1.659|0.584|1.654|0.576|0.543|0.575|1.663|0.578|1.659|0.580|1.658|0.581|1.657|0.579|1.658|0.575|1.663|0.579|1.659|0.578|0.541|0.582|1.656|0.574|0.544|0.576|0.543|0.575|0.544|0.578|0.541|0.577|0.542|0.573|0.546|0.577|1.664|0.574|0.540|0.583|1.654|0.577|1.662|0.574|1.663|0.578|1.663|0.570|40.93|9.44|2.210|0.577"
        private val ok = "9.56|4.453|0.579|0.540|0.578|0.540|0.581|1.658|0.589|0.529|0.579|0.540|0.584|0.541|0.578|0.535|0.580|0.539|0.581|1.657|0.582|1.656|0.590|0.529|0.581|1.657|0.586|1.652|0.586|1.652|0.588|1.650|0.583|1.655|0.587|0.532|0.583|0.537|0.582|1.656|0.582|0.537|0.589|0.531|0.582|0.536|0.577|1.660|0.579|0.540|0.584|1.654|0.584|1.654|0.579|0.540|0.580|1.658|0.583|1.655|0.583|1.654|0.584|0.535|0.582|1.660|0.578|40.92|9.37|2.215|0.580"
        private val exit = "9.78|4.456|0.584|0.536|0.580|0.538|0.575|1.663|0.577|0.541|0.581|0.538|0.580|0.539|0.584|0.535|0.576|0.543|0.582|1.660|0.577|1.658|0.579|0.540|0.578|1.660|0.577|1.660|0.581|1.658|0.579|1.657|0.582|1.656|0.577|1.661|0.578|1.663|0.573|0.542|0.583|1.655|0.581|1.657|0.581|0.538|0.582|1.655|0.583|0.540|0.575|0.538|0.579|0.540|0.577|1.660|0.577|0.542|0.581|0.537|0.581|1.656|0.581|0.542|0.579|1.654|0.580|40.82|9.37|2.217|0.581"
        private val next = "9.57|4.459|0.584|0.536|0.580|0.538|0.584|1.654|0.584|0.539|0.571|0.544|0.580|0.538|0.582|0.537|0.582|0.538|0.579|1.659|0.585|1.653|0.582|0.541|0.580|1.654|0.578|1.659|0.581|1.658|0.583|1.654|0.589|1.649|0.581|0.538|0.586|0.533|0.581|0.538|0.587|0.532|0.581|0.538|0.583|0.536|0.578|0.541|0.586|0.533|0.579|1.659|0.586|1.652|0.580|1.657|0.584|1.654|0.590|1.647|0.577|1.660|0.581|1.658|0.583|1.653|0.584|40.80|9.31|2.227|0.577"
        private val one = "9.51|4.462|0.584|0.535|0.578|0.541|0.583|1.655|0.576|0.544|0.577|0.540|0.580|0.540|0.580|0.537|0.586|0.533|0.581|1.658|0.587|1.651|0.584|0.535|0.584|1.654|0.580|1.658|0.579|1.659|0.586|1.651|0.579|1.659|0.581|1.656|0.582|0.537|0.584|0.535|0.585|0.533|0.582|1.656|0.582|0.536|0.583|0.535|0.589|0.530|0.579|0.539|0.583|1.655|0.584|1.658|0.580|1.653|0.582|0.536|0.582|1.655|0.583|1.654|0.581|1.657|0.587"
        private val two = "9.59|4.462|0.573|0.543|0.567|0.552|0.573|1.665|0.575|0.544|0.571|0.547|0.573|0.546|0.573|0.546|0.572|0.551|0.565|1.669|0.570|1.668|0.571|0.548|0.573|1.665|0.573|1.665|0.560|1.678|0.564|1.674|0.566|1.672|0.564|0.556|0.563|1.679|0.560|0.554|0.557|0.563|0.558|1.680|0.559|0.560|0.562|0.557|0.557|0.562|0.564|1.673|0.560|0.558|0.559|1.678|0.561|1.677|0.557|0.562|0.557|1.680|0.568|1.670|0.561|1.677|0.564|40.119|8.988|2.251|0.554"
        private val seven = "9.78|4.460|0.583|0.536|0.578|0.540|0.575|1.663|0.582|0.537|0.581|0.538|0.584|0.534|0.584|0.536|0.584|0.534|0.589|1.648|0.587|1.651|0.585|0.535|0.582|1.656|0.580|1.658|0.588|1.649|0.583|1.657|0.583|1.654|0.581|1.656|0.584|1.655|0.583|1.655|0.582|0.537|0.584|1.653|0.582|0.538|0.584|0.535|0.584|0.533|0.586|0.541|0.569|0.543|0.578|0.540|0.584|1.654|0.580|0.539|0.582|1.655|0.583|1.659|0.579|1.654|0.584|40.85|9.31|2.219|0.588"
        private val eight = "9.53|4.461|0.577|0.542|0.580|0.539|0.582|1.656|0.577|0.541|0.584|0.535|0.581|0.537|0.582|0.536|0.584|0.535|0.587|1.650|0.582|1.655|0.581|0.537|0.586|1.656|0.582|1.650|0.583|1.655|0.585|1.652|0.589|1.647|0.592|0.527|0.584|0.535|0.579|0.539|0.587|1.651|0.586|1.651|0.581|0.539|0.581|0.535|0.586|0.532|0.583|1.654|0.582|1.655|0.583|1.654|0.583|0.536|0.583|0.535|0.589|1.649|0.588|1.648|0.584|1.652|0.584|40.74|9.28|2.224|0.577"
        private val power = "9.60|4.462|0.575|0.539|0.579|0.540|0.584|1.654|0.586|0.534|0.579|0.548|0.573|0.537|0.583|0.540|0.579|0.536|0.586|1.653|0.584|1.654|0.576|0.544|0.583|1.656|0.588|1.654|0.578|1.656|0.584|1.654|0.581|1.658|0.587|0.531|0.581|0.543|0.579|0.536|0.583|1.656|0.584|0.534|0.584|0.535|0.584|0.535|0.578|0.541|0.583|1.660|0.583|1.651|0.585|1.652|0.585|0.535|0.584|1.655|0.584|1.654|0.580|1.658|0.585|1.653|0.586|40.91|9.33|2.225|0.582"
        private val volDown = "9.80|4.467|0.575|0.540|0.583|0.536|0.580|1.659|0.582|0.535|0.583|0.536|0.586|0.533|0.585|0.534|0.581|0.538|0.578|1.661|0.580|1.658|0.590|0.530|0.584|1.655|0.586|1.652|0.586|1.652|0.586|1.652|0.580|1.658|0.589|1.650|0.582|1.656|0.587|0.531|0.580|0.539|0.584|0.535|0.584|0.536|0.586|0.533|0.588|0.531|0.580|0.539|0.586|0.533|0.583|1.656|0.583|1.655|0.587|1.652|0.590|1.649|0.583|1.655|0.584|1.654|0.588|40.87|9.36|2.222|0.581"
        private val volUp = "9.50|4.464|0.580|0.540|0.574|0.545|0.573|1.670|0.569|0.546|0.567|0.551|0.570|0.549|0.571|0.548|0.569|0.550|0.562|1.676|0.575|1.663|0.571|0.548|0.567|1.671|0.573|1.666|0.569|1.669|0.567|1.675|0.560|1.674|0.554|0.566|0.562|1.675|0.565|0.555|0.561|0.558|0.561|0.557|0.561|0.558|0.558|0.561|0.562|0.557|0.558|1.680|0.559|0.561|0.553|1.684|0.557|1.686|0.562|1.671|0.549|1.689|0.555|1.683|0.550|1.688|0.552|40.132|8.974|2.271|0.538"
    }

    private fun signal(vararg values: String): String {
        var result = ""
        values.forEachIndexed { idx, value ->
            result += value
            if (idx < values.count() - 1) {
                result += pause
            }
        }
        return result
    }

    private fun repeatedSignal(count: Int, value: String): String {
        val list = mutableListOf<String>()
        for (i in 1..count) {
            list.add(value)
        }
        return signal(*list.toTypedArray())
    }

    override fun getDevices(): MutableList<V2Device> {
        return mutableListOf(
            BasicIRDevice("Quelle Live TV", repeatedSignal(2, input) + pause + signal(ok, exit)),
            BasicIRDevice("Quelle PS4", repeatedSignal(3, input) + pause + signal(ok, exit)),
            BasicIRDevice("Quelle Apple TV", repeatedSignal(4, input) + pause + signal(ok, exit)),
            BasicIRDevice("Quelle Mac", repeatedSignal(5, input) + pause + signal(ok, exit)),
            TVDevice())
    }

    inner class TVDevice : DeviceAdapter(), OnOff, Percentage {

        private var running = false

        override fun getName() = "Fernseher"

        override fun turnOn() {
            if (!running) {
                power.sendIR()
                running = !running
            }
        }

        override fun turnOff() {
            if (running) {
                power.sendIR()
                running = !running
            }
        }

        override fun decrementPercentage(delta: Double) {
            object : Thread() {
                override fun run() {
                    val range = Math.round(delta)
                    for (i in 1..range) {
                        volDown.sendIR()
                    }
                }
            }.start()
        }

        override fun incrementPercentage(delta: Double) {
            object : Thread() {
                override fun run() {
                    val range = Math.round(delta)
                    for (i in 1..range) {
                        volUp.sendIR()
                    }
                }
            }.start()
        }

        override fun setPercentage(value: Double) {
            "ignoring setPercentage".log("Fernseher")
        }
    }
}